package com.wap.sohu.mobilepaper.util;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;

/*******************************************************************************
 * AES加解密算法
 * 
 * @author arix04
 * 
 */

public class ToolsAesCbcCrypt {

	// 加密
	public static String Encrypt(String sSrc, String sKey) throws Exception {
		if (sKey == null) {
			System.out.print("Key为空null");
			return null;
		}
		// 判断Key是否为16位
		if (sKey.length() != 16) {
			System.out.print("Key长度不是16位");
			return null;
		}
		byte[] raw = sKey.getBytes("GBK");
		SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
		Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");// "算法/模式/补码方式"
		IvParameterSpec iv = new IvParameterSpec(sKey.getBytes());// 使用CBC模式，需要一个向量iv，可增加加密算法的强度
		cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);
		byte[] encrypted = cipher.doFinal(sSrc.getBytes());

		return new String(new Base64().encode(encrypted));// 此处使用BASE64做转码功能，同时能起到2次加密的作用。
	}

	// 解密
	public static String Decrypt(String sSrc, String sKey) throws Exception {
		try {
			// 判断Key是否正确
			if (sKey == null) {
				System.out.print("Key为空null");
				return null;
			}
			// 判断Key是否为16位
			if (sKey.length() != 16) {
				System.out.print("Key长度不是16位");
				return null;
			}
			byte[] raw = sKey.getBytes("GBK");
			SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
			Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
			IvParameterSpec iv = new IvParameterSpec(sKey.getBytes());
			cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);
			byte[] encrypted1 = new Base64().decode(sSrc.getBytes());// 先用base64解密
			try {
				byte[] original = cipher.doFinal(encrypted1);
				String originalString = new String(original);
				return originalString;
			} catch (Exception e) {
				System.out.println(e.toString());
				return null;
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			return null;
		}
	}

	public static void main(String[] args) throws Exception {
		/*
		 * 加密用的Key 可以用26个字母和数字组成，最好不要用保留字符，虽然不会错，至于怎么裁决，个人看情况而定
		 * 此处使用AES-128-CBC加密模式，key需要为16位。
		 */
		String cKey = "2D2AE7C87C712EB5";
		// 需要加密的字串
		String cSrc = "a=4&b=0&c=nZM7oCFDBlLR6milsBLpMJ2Z/P8=&e=1.10&f=WindowsPhone&g=7&h=480x800&i=Microsoft--XDeviceEmulator&j=0&p=  http://db3.notify.live.net/throttledthirdparty/01.00/AAHmAKcaecdmTJJGapcEAhogAgAAAAADAQAAAAQUZm52OjIzOEQ2NDJDRkI5MEVFMEQ&u=0";
		
		String enSrc = "diUk7TcZOeuBtAqhZRTX5mWBh/+QfZArOMLz9A14Kb1SpWJry4q56KcZ862hTf7j/JSan2A5Tt9aaVZYw6YRUMKmN2+lYovHmtm+UE7kKCeGiWIppBh50G6TUDo811MuT8ZzDOXp1KP4ebe769MDQvVGMBhmIlAOyGuPhfs9AVI=";
		enSrc = "N/d/VnWhg85vGJWaDF3aMVNxlmXPT9mngVDkqnNnfoUqS/pgBfyXxF+w67a8S+BE3oDa+QwqKC3oRPV6MYVSdu4mURvyyB2uq6L0xSyiTBgn6BL75RYiA59uvnhz4qEx61rINXDLBU7YLQx7TTp9zUyp05St3KBDR78VJjUsQQg=";
		// 加密
		long lStart = System.currentTimeMillis();
		String enString = ToolsAesCbcCrypt.Encrypt(cSrc, cKey);
		System.out.println("加密后的字串是：" + enString);

		long lUseTime = System.currentTimeMillis() - lStart;
		System.out.println("加密耗时：" + lUseTime + "毫秒");
		// 解密
		lStart = System.currentTimeMillis();
		String DeString = ToolsAesCbcCrypt.Decrypt(enSrc, cKey);
		System.out.println("解密后的字串是：");
		System.out.println(DeString);
		System.out.println("加密前的字串是：");
		System.out.println(cSrc);
		lUseTime = System.currentTimeMillis() - lStart;
		System.out.println("解密耗时：" + lUseTime + "毫秒");
	}
}