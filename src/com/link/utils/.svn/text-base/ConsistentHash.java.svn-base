package com.wap.sohu.mobilepaper.util;

import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.TreeMap;


/**
 * 一致性hash算法，基于TreeMap.ceilingKey()方法
 *
 */
public class ConsistentHash {

	static final int NUM_REPS = 160;

	private volatile int maxTries;

	private transient volatile TreeMap<Long, String> ketamaSessions = new TreeMap<Long, String>();

	public ConsistentHash() {
	}

	public ConsistentHash(List<String> list) {
		super();
		buildMap(list);
	}

	private final void buildMap(Collection<String> list) {
		TreeMap<Long, String> sessionMap = new TreeMap<Long, String>();

		for (String str : list) {
			String sockStr = str;
			/**
			 * 每个节点复制160*weight次，并分配到环上
			 */
			int numReps = NUM_REPS;

			for (int i = 0; i < numReps / 4; i++) {
				byte[] digest = computeMd5(sockStr + "-" + i);
				for (int h = 0; h < 4; h++) {
					long k = ((long) (digest[3 + h * 4] & 0xFF) << 24)
							| ((long) (digest[2 + h * 4] & 0xFF) << 16)
							| ((long) (digest[1 + h * 4] & 0xFF) << 8)
							| (digest[h * 4] & 0xFF);
					sessionMap.put(k, str);
				}

			}
		}
		ketamaSessions = sessionMap;
		this.maxTries = list.size();
	}

	public final String getStringByKey(final String key) {
		if (ketamaSessions == null || ketamaSessions.size() == 0)
			return null;
		long hash = hash(key);
		String rv = getStringByHash(hash);
		int tries = 0;
		while (rv == null  && tries++ < this.maxTries) {
			hash = nextHash(hash, key, tries);
			rv = getStringByHash(hash);
		}
		return rv;
	}

	public final String getStringByHash(final long hash) {
		TreeMap<Long, String> StringMap = ketamaSessions;
		Long resultHash = hash;
		if (!StringMap.containsKey(resultHash)) {
			resultHash = StringMap.ceilingKey(resultHash);
			if (resultHash == null && StringMap.size() > 0) {
				resultHash = StringMap.firstKey();
			}
		}
		return StringMap.get(resultHash);
	}

	public final long nextHash(long hashVal, String key, int tries) {
		long tmpKey = hash(tries + key);
		hashVal += (int) (tmpKey ^ (tmpKey >>> 32));
		hashVal &= 0xffffffffL; /* truncate to 32-bits */
		return hashVal;
	}

	public final void updateStrings(final Collection<String> list) {
		buildMap(list);
	}

	private static byte[] computeMd5(String k) {
		MessageDigest md5;
		try {
			md5 = MessageDigest.getInstance("MD5");
		} catch (NoSuchAlgorithmException e) {
			throw new RuntimeException("MD5 not supported", e);
		}
		md5.reset();
		md5.update(getBytes(k));
		return md5.digest();
	}

	private static final byte[] getBytes(String k) {
		if (k == null || k.length() == 0) {
			throw new IllegalArgumentException("Key must not be blank");
		}
		try {
			return k.getBytes("utf-8");
		} catch (UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
	}

	private long hash(final String k) {
		long rv = 0;
		byte[] bKey = computeMd5(k);
		rv = ((long) (bKey[3] & 0xFF) << 24) | ((long) (bKey[2] & 0xFF) << 16)
				| ((long) (bKey[1] & 0xFF) << 8) | (bKey[0] & 0xFF);
		return rv & 0xffffffffL;
	}

	public static void main(String[] args) {
		List<String> list = new ArrayList<String>();
		list.add("user_data_0");
		list.add("user_data_1");
		list.add("user_data_2");
		list.add("user_data_3");
		list.add("user_data_4");
		list.add("user_data_5");
		list.add("user_data_6");
		list.add("user_data_7");
		list.add("user_data_8");
		list.add("user_data_9");
		ConsistentHash kat = new ConsistentHash(list);
			System.out.println(kat.getStringByKey("jtong512@wap.sohu.com"));
	}
}
