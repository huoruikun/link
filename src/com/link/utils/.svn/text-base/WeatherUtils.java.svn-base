package com.wap.sohu.mobilepaper.util;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

public class WeatherUtils {
	private static Log log = LogFactory.getLog(WeatherUtils.class);
	
	private static final ConcurrentHashMap<String,Map<String,WeatherOneDay>> weaterMap = new ConcurrentHashMap<String,Map<String,WeatherOneDay>>();
	private static final AtomicLong updateTime = new AtomicLong(0); 
	private static final long cacheTime = 3600 * 1000; // 缓存一个小时
	private static final String url = "http://10.13.81.61/api/set.go?m=getWeather";
	
	private static void checkIsNew(){
		if(System.currentTimeMillis()-updateTime.get()<cacheTime){
			// do nothing
			return;
		}
		synchronized(WeatherUtils.class){
			if(System.currentTimeMillis()-updateTime.get()<cacheTime){
				return;
			}
			updateMap();
			updateTime.getAndSet(System.currentTimeMillis()); // 原子更新long值
		}
	}
	private static void updateMap(){
		try{
			// System.out.println("weather url:"+url);
			
			String x = HttpUtil.getUrlContent( url);
			Document doc = DocumentHelper.parseText(x);
	   
			Element el = doc.getRootElement();
	   
		   Iterator<Element> it = el.elementIterator();
		   while(it.hasNext()){
		       Element foo =  it.next();
		       
		       // System.out.println(foo.elementText("name"));
		       Map<String,WeatherOneDay> dateWeatherMap = new HashMap<String,WeatherOneDay>();
		       weaterMap.put(foo.elementText("name"),dateWeatherMap );
		   
		       Element weather = foo.element("weather");
		   
		       Iterator<Element> it1 = weather.elementIterator();
		       while(it1.hasNext()){
			      Element foo1 =  it1.next();
			      /*
			      System.out.println(foo1.elementText("date"));
				  System.out.println(foo1.elementText("temph"));
				  System.out.println(foo1.elementText("templ"));
				  System.out.println(foo1.elementText("wind"));
				  System.out.println(foo1.elementText("desc"));
				  System.out.println(foo1.elementText("icon"));
				  */
				  dateWeatherMap.put(foo1.elementText("date"),
						  new WeatherOneDay(
								  foo1.elementText("temph"),
								  foo1.elementText("templ"),
								  foo1.elementText("wind"),
								  foo1.elementText("desc"),
								  foo1.elementText("icon")));
		       }
		   }
		}catch(Exception e){
			log.error("", e);
		}
	}
	
	private static ConcurrentHashMap<String,Map<String,WeatherOneDay>> getWeatherMap(){
		checkIsNew();
		return  weaterMap;
	}
	
	public static String getTodayWeaterByCityName(String cityName) {
		String weatherStr = "";
		try {
			Map<String, WeatherOneDay> map = getWeatherMap().get(cityName);
			if (map == null) {
				map = getWeatherMap().get("北京");
			}
			if (map == null)
				return weatherStr;

			WeatherOneDay weather = map.get(DateUtil.getDate("yyyyMMdd"));
			
			weatherStr = "<img src=\""+ weather.getIcon()+"\" />"+weather.getTempl()+"℃~"+weather.getTemph()+"℃<span>"+cityName+"[换]</span>";

		} catch (Exception e) {
			log.error("weather", e);
		}
		return weatherStr;
	}

	public static String getTomorrowWeaterByCityName(String cityName) {
		String weatherStr = "";
		try {
			Map<String, WeatherOneDay> map = getWeatherMap().get(cityName);
			if (map == null) {
				map = getWeatherMap().get("北京");
			}
			if (map == null)
				return weatherStr;

			WeatherOneDay weather = map.get(DateUtil.formatToStr(
					System.currentTimeMillis() + 24 * 3600 * 1000, "yyyyMMdd"));

			weatherStr = "<img src=\""+ weather.getIcon()+"\" />"+weather.getTempl()+"℃~"+weather.getTemph()+"℃<span>"+cityName+"[换]</span>";
		} catch (Exception e) {
			log.error("weather", e);
		}
		return weatherStr;
	}
	
	
	private static class WeatherOneDay{
		String temph=null;
		String templ=null;
		String wind=null;
		String desc=null;
		String icon=null;
		WeatherOneDay(String temph,String templ,String wind,String desc,String icon){
			this.temph = temph;
			this.templ = templ;
			this.wind = wind;
			this.desc = desc;
			this.icon = icon;
		}
		public String getTemph(){
			return this.temph;
		}
		public String getTempl(){
			return this.templ;
		}
		public String getWind(){
			return this.wind;
		}
		public String getDesc(){
			return this.desc;
		}
		public String getIcon(){
			return this.icon;
		}
	}
	
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		System.out.println(getTodayWeaterByCityName("北京"));
	}

}
